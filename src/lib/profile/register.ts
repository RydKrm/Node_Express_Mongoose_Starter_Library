import { Document, Model as MongooseModel } from "mongoose";
import asyncHandler from "express-async-handler";
import { Request, Response } from "express";
import bcrypt from "bcrypt";
import { negativeResponse, positiveResponse } from "../response/response";
import { autoGeneratedPassword } from "./../others/generatePassword";

interface RegisterOption {
  role?: string;
  required?: string[];
}

export const register = (
  Model: MongooseModel<Document>,
  emailTemplate,
  options: RegisterOption = {}
) => {
  return asyncHandler(async (req: Request, res: Response) => {
    // const userRole = options.role || "User";

    const { email, name, phoneNumber } = req.body;

    if (options.required) {
      for (const item of options.required) {
        if (!req.body[item]) {
          return negativeResponse(
            res,
            ` ${options.required.join(" ")} field are required`
          );
        }
      }
    }

    if (!name || !email || !phoneNumber)
      return negativeResponse(
        res,
        "Phone number, email, name field are required"
      );
    const userCount = await Model.countDocuments({
      $or: [{ email }, { phoneNumber }],
    });

    if (userCount > 0)
      return negativeResponse(
        res,
        "User already exists by phone number or email"
      );

    const password = autoGeneratedPassword();

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    const user = { ...req.body, password: hashedPassword };
    const userProfile = await Model.create(user);

    if (!userProfile)
      return negativeResponse(res, `${Model.modelName} not created created`);

    positiveResponse(res, `${Model.modelName} account created`);
  });
};
